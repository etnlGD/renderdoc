/******************************************************************************
 * The MIT License (MIT)
 * 
 * Copyright (c) 2016 Baldur Karlsson
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/

layout(binding = 1, std140) readonly buffer vertex_data
{
	vec4 data[];
} vb;

layout(binding = 2, std430) readonly buffer index_data
{
	uint data[];
} ib;

layout(binding = 3, std140) buffer pickresult_buffer
{
	uvec4 counter;
	uvec4 results[];
} pickresult;

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

void main()
{
	uvec3 tid = gl_GlobalInvocationID;

	uint vertid = tid.x;

	if(vertid >= meshpick.numVerts)
		return;

	uint idx = meshpick.use_indices != 0u ? ib.data[vertid] : vertid;

	vec4 pos = vb.data[idx];

#ifdef VULKAN
	if(meshpick.unproject == 1u)
		pos = vec4(pos.x, -pos.y, pos.z, pos.w);
#endif

	vec4 wpos = meshpick.mvp * pos;

	wpos.xyz /= wpos.www;

	wpos.xy *= vec2(1.0f, -1.0f);

	vec2 scr = (wpos.xy + 1.0f) * 0.5f * meshpick.viewport;

	// close to target co-ords? add to list
	float len = length(scr - meshpick.coords);
	if(len < 35.0f)
	{
		uint result_idx = atomicAdd(pickresult.counter.x, 1u);
		pickresult.results[result_idx] = uvec4(vertid, idx, floatBitsToUint(len), floatBitsToUint(wpos.z));
	}
}
